{"version":3,"sources":["LineChart.jsx","App.js","reportWebVitals.js","index.js","logo.svg"],"names":["ChartJS","register","LineElement","CategoryScale","LinearScale","PointElement","Tooltip","Legend","LineChart","React","createElement","Line","data","labels","datasets","label","fill","borderColor","tension","options","responsive","plugins","legend","position","tooltip","mode","intersect","scales","y","beginAtZero","App","count","setCount","useState","colour","setColour","previous","setPrevious","timer","setTimer","useEffect","interval","setInterval","prev","clearInterval","alert","strokeDashoffset","className","src","logo","alt","href","target","rel","style","display","flexDirection","gap","onClick","color","width","height","viewBox","cx","cy","r","stroke","strokeWidth","strokeDasharray","strokeLinecap","transition","name","type","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.7bac2c38.chunk.js","sourcesContent":["import React from 'react';\nimport {Line} from 'react-chartjs-2';\nimport {Chart as ChartJS, LineElement, CategoryScale,LinearScale,PointElement,Tooltip,Legend} from 'chart.js';\n\nChartJS.register(LineElement, CategoryScale, LinearScale, PointElement, Tooltip,Legend);\n\nconst LineChart = () =>{\n  const data = {\n    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May'],\n    datasets: [\n\t{\n\t  label: 'My Data',\n\t  data: [12,19,3,5,2],\n\t  fill: false,\n\t  borderColor: 'rgb(75,192,192)',\n\t  tension: 0.4,\n\t},\n     ],\n   };\n\nconst options = {\n  responsive: true,\n  plugins: {\n   legend:{position:'top'},\n   tooltip: {mode: 'index', intersect: false},\n   },\n   scales:{\n     y:{\n        beginAtZero: true,\n     },\n   },\n  };\n\n  return <Line data={data} options={options} />;\n};\n\nexport default LineChart;\n","import logo from './logo.svg';\nimport './App.css';\nimport React, {useEffect,useState} from 'react';\nimport LineChart from './LineChart';\n\nfunction App() {\n  const [count,setCount] = useState(50);\n  const [colour, setColour]= useState('orange');\n  const [previous, setPrevious] = useState('');\n  const [timer, setTimer] = useState(30);\n  const totalTime = 30;\n  const handleClickA = ()=>{\n\tsetColour('green');\n\tsetCount(count+1);\n\tsetPrevious(\"You just earned $1\");\n\t};\n const handleDonate = ()=>{\n\tsetColour('red');\n\tsetCount(count-2);\n\tsetPrevious(\"You donated $2. What a Charitable Lad\");\n\t};\n useEffect(() => {\n\tif (count >200){\n\t  setCount(0);\n\t}\n\t},[count]);\n  useEffect(()=>{\n\tif(timer===0){\n\t  alert(\"Uh-Oh Time is up. Time to Restart my Game\");\n\t  setCount(150);\n\t  setTimer(30);\n\t}else{\n\t  const interval = setInterval(()=>{\n\t    setTimer(prev => prev - 1);\n\t  },1000);\n\t  return () => clearInterval(interval);\n\t}\n  },[timer]);\n  const strokeDashoffset = (timer/totalTime)*440;\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n\t<p>What did i tell you, Now i just need to make some money.</p>\n\t<div style={{display: 'flex', flexDirection:'row',gap:'50px'}}>\n\t<button onClick={()=> handleClickA()}>Free Money</button> \n\t<button onClick={()=> handleDonate()}>Donate</button>\n\t</div>\n\t<h1 style={{color: colour}}>${count}</h1>\n\t<h2 style={{color: colour}}>{previous}</h2>\n\t<h3>\n\t  {count === 0\n\t    ? \"Wow, you're greedy! For that, you lose everything.\"\n\t    : \"Maybe you could give a little to the homeless.\"}\n\t</h3>\n\t<div>\n\t  <svg width=\"150\" height=\"150\" viewBox = \"0 0 150 150\">\n\t  {/* Background Circle */}\n\t  <circle cx=\"75\" cy=\"75\" r=\"70\" stroke=\"#e6e6e6\" strokeWidth=\"10\" fill=\"none\"/>\n\t  {/* Foreground Circle (progress) */}\n\t  <circle cx=\"75\"\n          cy=\"75\"\n          r=\"70\"\n          stroke=\"#00ff00\"\n\t  strokeWidth=\"10\"\n\t  fill=\"none\"\n\t  strokeDasharray=\"440\"\n\t  strokeDashoffset={strokeDashoffset}\n\t  strokeLinecap=\"round\"\n\t  style={{ transition: \"stroke-dashoffset 1s linear\" }}\n\t  />\n\t  </svg>\n\t  Timer: {timer}s\n\t</div>\n\t<div>\n\t  <label>To-Do List <input name=\"Item\" /></label>\n\t  <label> Complete <input type=\"checkbox\" name=\"myCheckbox\"/></label>\n\t</div>\n\t<div>\n\t  <h2> GPT Line Graph</h2>\n\t  <LineChart />\n   \t</div>\n      </header>\n      <p>Third Message this will work</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";"],"sourceRoot":""}